#+TITLE: .emacs.d
#+AUTHOR: Andriy Kmit'
#+STARTUP: show2levels
#+PROPERTY: header-args    :tangle init.el
#+PROPERTY: header-args+   :lexical t

This is a personal configuration of [[https://www.gnu.org/software/emacs/][GNU Emacs]].

Currently, this is in WIP state, and my daily driver is still a heavily
customized Spacemacs [[https://github.com/madand/dotemacs][setup]]; which gives me inspiration for what third party
packages might be of use and how to build (semi-)mnemonic key bindings.

* Table of Contents                                                     :TOC:
- [[#early-config][Early Config]]
  - [[#preamble][Preamble]]
  - [[#custom-settings-in-a-separate-file][Custom Settings in a Separate File]]
  - [[#native-compilation][Native Compilation]]
  - [[#define-custom-keymaps][Define Custom Keymaps]]
- [[#package-management][Package Management]]
  - [[#straightel][straight.el]]
  - [[#use-package][use-package]]
  - [[#no-littering][no-littering]]
  - [[#delight][delight]]
  - [[#el-patch][el-patch]]
- [[#key-bindings][Key Bindings]]
  - [[#generalel][general.el]]
  - [[#global-key-bindings][Global Key Bindings]]
  - [[#which-key][which-key]]
- [[#display][Display]]
  - [[#fonts][Fonts]]
  - [[#themes-modus-themes][Themes: Modus Themes]]
  - [[#text-scale][text-scale+]]
  - [[#form-feed][form-feed]]
  - [[#display-fill-column-indicator][display-fill-column-indicator]]
  - [[#whitespace][Whitespace]]
  - [[#pulse][pulse]]
- [[#fundamental-external-packages][Fundamental External Packages]]
  - [[#avy][Avy]]
  - [[#link-hint][link-hint]]
  - [[#embark][Embark]]
  - [[#marginalia][Marginalia]]
  - [[#orderless][Orderless]]
  - [[#vertico][Vertico]]
  - [[#consult][Consult]]
  - [[#popper][Popper]]
- [[#minibuffer][Minibuffer]]
  - [[#recursive-minibuffers][Recursive Minibuffers]]
  - [[#history][History]]
  - [[#savehist][Savehist]]
- [[#files][Files]]
  - [[#auto-save][Auto Save]]
  - [[#backup-files][Backup Files]]
  - [[#recentf][recentf]]
  - [[#sudo-edit][sudo-edit]]
- [[#windows][Windows]]
  - [[#winner-mode][winner-mode]]
- [[#frames][Frames]]
- [[#misc][Misc]]
  - [[#gpg][GPG]]
  - [[#enable-all-disabled-commands][Enable all disabled commands]]
  - [[#undoredo][Undo/Redo]]
  - [[#vundo][vundo]]
  - [[#ytdl][ytdl]]
  - [[#startup][Startup]]
  - [[#save-place][Save Place]]
  - [[#incremental-search-isearch][Incremental Search (isearch)]]
  - [[#xref][Xref]]
  - [[#help][Help]]
  - [[#rainbow-mode][rainbow-mode]]
  - [[#dired][Dired]]
  - [[#iedit][iedit]]
  - [[#visual-fill-column-mode][visual-fill-column-mode]]
  - [[#novel---epub-reader][nov.el - EPUB Reader]]
  - [[#pdf-tools][pdf-tools]]
  - [[#wgrep][wgrep]]
  - [[#speed-type][speed-type]]
  - [[#olivetti][Olivetti]]
  - [[#disk-usageel][disk-usage.el]]
  - [[#kitchen-sink-for-the-time-being][Kitchen sink for the time being]]
- [[#version-control][Version Control]]
  - [[#magit][Magit]]
  - [[#vc][vc]]
- [[#international][International]]
  - [[#language-environments][Language Environments]]
- [[#narrowing][Narrowing]]
- [[#org][Org]]
  - [[#org-mode][Org Mode]]
  - [[#org-roam][Org roam]]
  - [[#toc-org][toc-org]]
  - [[#emacs-lisp-in-org][Emacs Lisp in Org]]
- [[#eww][EWW]]
  - [[#fix-bold-and-italic-with-proportional-font][Fix bold and italic with proportional font]]
  - [[#language-detectionel][language-detection.el]]
- [[#autotyping][Autotyping]]
  - [[#abbrev-mode][Abbrev Mode]]
  - [[#auto-revert][Auto Revert]]
  - [[#hippie-expand][Hippie Expand]]
- [[#lisp][Lisp]]
  - [[#lisp-extra-font-lock][lisp-extra-font-lock]]
  - [[#lispy][Lispy]]
  - [[#profiler][Profiler]]
  - [[#macrostep-interactive-macro-expander][macrostep: interactive macro-expander]]
- [[#clojure][Clojure]]
  - [[#cider][Cider]]
- [[#programming][Programming]]
  - [[#web-mode][Web Mode]]
- [[#staging][Staging]]
  - [[#hideshow-mode][hideshow-mode]]
  - [[#minibuffer-and-completions-in-tandem-mct][Minibuffer and Completions in Tandem (mct)]]
- [[#license][License]]

* Early Config

This section contains stuff that must be at the very top of the init file.

** Preamble

The heading part of the tangled ~init.el~ file.

#+begin_src emacs-lisp
;;; init.el --- The Emacs Initialization File        -*- lexical-binding: t; -*-

;; Copyright (C) 2022 Andriy Kmit'

;; Author: Andriy Kmit' <dev@madand.net>
;; URL: https://github.com/madand/.emacs.d

;; This file is NOT part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; This file was tangled (generated) from the file README.org. Thus, you SHOULD
;; NOT modify this file directly. Instead, edit and re-tangle the README.org.

;;; Code:
#+end_src

** Custom Settings in a Separate File

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file :no-error)
#+end_src

** Native Compilation

[[info:elisp#Native Compilation][Native Compilation]]

Allow native compilation to utilize all the available cores.

#+begin_src emacs-lisp
(setq native-comp-async-jobs-number (num-processors))
#+end_src

** Define Custom Keymaps

#+begin_src emacs-lisp
(defvar my-toggles-map (make-sparse-keymap)
  "Keymap for toggling stuff like minor modes.")
#+end_src

* Package Management

The packages that streamline the installation and configuration of packages 📦

** straight.el

[[https://github.com/raxod502/straight.el]]

#+begin_src emacs-lisp
  (setq straight-vc-git-auto-fast-forward nil
        straight-use-package-by-default t
        straight-check-for-modifications '(check-on-save find-when-checking))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5)
        (revision "4a473e51dea1ff5eeffee2eb193c3bade628b35e"))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           (format "https://raw.githubusercontent.com/raxod502/straight.el/%s/install.el" revision)
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** use-package

[[https://github.com/jwiegley/use-package]]

#+begin_src emacs-lisp
(straight-use-package 'use-package)
(require 'use-package)

(use-package use-package
  :bind (:map help-map
         ("B" . describe-personal-keybindings)))
#+end_src

From this point on, we can use the ~use-package~ macro for package configuration.

*** Gathering Statistics

For gathering package statistics tangle the following block and ~M-x
use-package-report~.

#+begin_src emacs-lisp
(setq use-package-compute-statistics t)
#+end_src

** no-littering

[[https://github.com/emacscollective/no-littering]]

This package must be loaded as early as possible.

#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

** delight

[[https://www.emacswiki.org/emacs/DelightedModes]]

Delight enables you to easily customise how major and minor modes appear in the
Mode Line.

#+begin_src emacs-lisp
(straight-use-package 'delight)
#+end_src

Let's disable indicators of some of the built-in minor modes:

#+begin_src emacs-lisp
(delight '((eldoc-mode nil eldoc)))
#+end_src

** el-patch

[[https://github.com/raxod502/el-patch]]

#+begin_src emacs-lisp
(use-package el-patch)
#+end_src

* Key Bindings

** general.el

[[https://github.com/noctuid/general.el]]

The one package to rule all the keybindings.

#+begin_src emacs-lisp
(straight-use-package 'general)
#+end_src

** Global Key Bindings

#+begin_src emacs-lisp

(defvar my-super-map (make-sparse-keymap)
  "Keymap for the Super (Win) key bindings.")

(general-def
  "C-c v" #'view-mode

  "C-x C-b" #'ibuffer
  "C-x b" #'consult-buffer

  "C-o" #'open-line
  "C-t" #'transpose-chars
  "C-z" #'set-mark-command

  "M-SPC" #'cycle-spacing

  "s-o" #'mode-line-other-buffer
  "s-k" #'kill-this-buffer
  "s-," #'previous-buffer
  "s-." #'next-buffer

  ;; Keys to be defined…
  "M-\\" 'undefined
  "C-x C-l" 'undefined
  "C-x C-u" 'undefined)
#+end_src

Use DWIM variants of case converting commands. This frees up 2 key chords:
=C-c C-l= and =C-c C-u=.

#+begin_src emacs-lisp
(general-def
  "M-c" #'capitalize-dwim
  "M-l" #'downcase-dwim
  "M-u" #'upcase-dwim)
#+end_src

** which-key

[[https://github.com/justbur/emacs-which-key]]

#+begin_src emacs-lisp
(use-package which-key
  :delight which-key-mode
  :init
  (which-key-setup-side-window-right-bottom)
  (which-key-mode))
#+end_src

* Display

** Fonts

*** Font Family

Use [[https://github.com/be5invis/iosevka][Iosevka]] as the monospace font, and [[https://fonts.google.com/noto/specimen/Noto+Serif][Noto Serif]] as the proportional one.

Note that with Emacs 28 or newer and with [[https://github.com/googlefonts/noto-emoji][Noto Emoji]] font installed, you get the
full support for displaying emojis. No configuration needed!

#+begin_src emacs-lisp
(defvar my-font-mono (font-spec :family "Iosevka SS09" :size 16))
;; (defvar my-font-mono-serif (font-spec :family "Iosevka Slab"))
(defvar my-font-proportional (font-spec :family "Noto Serif" :size 20))

(set-frame-font my-font-mono t t)

(set-face-font  'default            my-font-mono)
(set-face-font  'fixed-pitch        my-font-mono)
(set-face-font  'fixed-pitch-serif  my-font-mono)
(set-face-font  'variable-pitch     my-font-proportional)
#+end_src

*** Font Size

#+begin_src emacs-lisp
(defvar my-font-sizes '( :laptop (16 . 20)
                         :monitor (21 . 26)))

(cl-defun my-set-faces-font-size (font-sizes &optional (frame (window-frame)))
  (pcase-let ((`(,fixed-size . ,variable-size) font-sizes))
    (set-face-font 'variable-pitch (font-spec :size variable-size) frame)
    (dolist (face '(default fixed-pitch fixed-pitch-serif))
      (set-face-font face (font-spec :size fixed-size) frame))))

(defun my-set-font-size-laptop (&optional frame)
  (interactive)
  (my-set-faces-font-size (plist-get my-font-sizes :laptop) frame))

(defun my-set-font-size-monitor (&optional frame)
  (interactive)
  (my-set-faces-font-size (plist-get my-font-sizes :monitor) frame))

(defun my-update-font-size-per-display (&optional frame &rest _)
  (let ((frame (and (framep frame) frame)))
    (cond
     ((> (cl-third (frame-monitor-geometry frame)) 1366)
      (my-set-font-size-monitor frame))
     (t (my-set-font-size-laptop frame)))))

(add-hook 'window-size-change-functions #'my-update-font-size-per-display)
(add-hook 'after-make-frame-functions #'my-update-font-size-per-display)
(advice-add 'load-theme :after #'my-update-font-size-per-display)
#+end_src

Ensure that mode line will be displayed with the fixed font size, not tied to
the font size of the ~default~ face.

#+begin_src emacs-lisp
(defface my-mode-line-font
  nil
  "This face ensures the font size for the mode line."
  :group 'mode-line-faces)

(set-face-font 'my-mode-line-font my-font-mono)

(defun my-set-mode-line-font-face (&rest _)
  (set-face-attribute 'mode-line nil :inherit 'my-mode-line-font)
  (set-face-attribute 'mode-line-inactive nil :inherit 'my-mode-line-font))

(advice-add 'load-theme :after #'my-set-mode-line-font-face)
#+end_src

** Themes: Modus Themes                                             :builtin:
- [[https://protesilaos.com/emacs/modus-themes]]
- [[info:modus-themes#Top][modus-themes#Top]]

#+begin_src emacs-lisp
(use-package modus-themes
  :straight nil
  :no-require t
  :bind (:map my-toggles-map ("T" . modus-themes-toggle))
  :custom
  ;; Use lightened variant of the Solarized Light background color (yellowish),
  ;; instead of the pure white.
  (modus-themes-operandi-color-overrides '((bg-main . "#fdf8eb")
                                           (bg-dim . "#f6f1e5")
                                           (bg-alt . "#eeeadd")))

  ;; Use light-grey as the default text color, instead of the pure white.
  (modus-themes-vivendi-color-overrides '((fg-main . "#ebebeb")))

  ;; Other theme customizatins (peronal preferences).
  (modus-themes-bold-constructs t)
  (modus-themes-diffs 'desaturated)
  (modus-themes-mode-line '(borderless))
  (modus-themes-org-blocks 'gray-background)
  (modus-themes-prompts '(gray))
  (modus-themes-region '(no-extend bg-only))
  (modus-themes-subtle-line-numbers t)
  (modus-themes-syntax '(faint))
  (modus-themes-variable-pitch-headings t)
  :init
  (load-theme 'modus-operandi t))
#+end_src

** text-scale+

[[https://github.com/madand/text-scale-plus.el]]

Improve ~text-scale-mode~ with multi-face support.

#+begin_src emacs-lisp
(use-package text-scale+
  :straight '(text-scale+ :host github :repo "madand/text-scale-plus.el"))
#+end_src

** form-feed

[[https://depp.brause.cc/form-feed/]]

Display ^L glyphs as horizontal lines.

#+begin_src emacs-lisp
(use-package form-feed
  :straight '(form-feed :host nil :repo "https://depp.brause.cc/form-feed.git")
  :delight
  :init (global-form-feed-mode))
#+end_src

** display-fill-column-indicator                                    :builtin:

[[info:emacs#Displaying Boundaries][emacs#Displaying Boundaries]]

#+begin_src emacs-lisp
(use-package display-fill-column-indicator
  :straight nil                         ; Built-in package
  :bind ( :map my-toggles-map
          ("f" . display-fill-column-indicator-mode)))
#+end_src

** Whitespace

[[info:emacs#Useless Whitespace][emacs#Useless Whitespace]]

*** show-trailing-whitespace

Emacs provides a (buffer-local) varirble ~show-trailing-whitespace~ to control the
displaying of the trailing whitespace. Here we define a simple minor mode that
will toggle that varirble for us.

#+begin_src emacs-lisp
(define-minor-mode my-show-trailing-whitespace-mode
  "Toggle trailing whitespace visualization (Trailing Whitespace mode).

See a variable `show-trailing-whitespace'."
  :lighter nil
  :init-value nil
  :global nil
  (setq show-trailing-whitespace my-show-trailing-whitespace-mode))
#+end_src

Now let's bind the newly defined minor mode to a keybinding.

#+begin_src emacs-lisp
(define-key my-toggles-map "w" #'my-show-trailing-whitespace-mode)
#+end_src

Automatically show trailing whitespace in programming, text and Org mode.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'my-show-trailing-whitespace-mode)
(add-hook 'text-mode-hook #'my-show-trailing-whitespace-mode)
(add-hook 'org-mode-hook #'my-show-trailing-whitespace-mode)
#+end_src

*** whitespace-mode                                                 :builtin:

~whitespace-mode~ visually displays ALL kinds of whitespace characters: spaces,
tabs, newlines etc.

#+begin_src emacs-lisp
(use-package whitespace
  :straight nil
  :bind (:map my-toggles-map ("W" . whitespace-mode)))
#+end_src

*** ws-butler

[[https://github.com/lewang/ws-butler]]

An unobtrusive way to trim spaces from end of line.

- Only lines touched get trimmed. If the white space at end of buffer is changed,
  then blank lines at the end of buffer are truncated respecting
  ~require-final-newline~.
- Trimming only happens when saving.

#+begin_src emacs-lisp
(use-package ws-butler
  :delight ws-butler-mode
  :hook ((prog-mode text-mode org-mode) . ws-butler-mode))
#+end_src

** pulse                                                            :builtin:

#+begin_src emacs-lisp
(defun pulse-line (&rest _)
      "Pulse the current line."
      (pulse-momentary-highlight-one-line (point)))

(dolist (command '(scroll-up-command scroll-down-command
                   recenter-top-bottom other-window))
  (advice-add command :after #'pulse-line))
#+end_src

* Fundamental External Packages

Third-party packages that are fundamental for my setup. They might improve your
Emacs workflow in major ways. Moreover, they synergize with each other!

#+begin_src emacs-lisp
(defvar my-quick-select-keys '(?r ?a ?e ?n ?o ?t ?i ?h)
  "Keys for performing quick selections/jumps with tools like Avy.")
#+end_src

** Avy

- [[https://github.com/abo-abo/avy]]
- [[https://karthinks.com/software/avy-can-do-anything/]]

avy is a GNU Emacs package for jumping to visible text using a
char-based decision tree. It allows one to jump to any visible text with just
3-5 key strokes (even between windows and frames).

#+begin_src emacs-lisp
(defvar xref-prompt-for-identifier)
(defun my-avy-action-find-definitions (pt)
  (goto-char pt)
  (let ((xref-prompt-for-identifier nil))
    (call-interactively #'xref-find-definitions)))

(defvar my-avy-dispatch-alist
  '((?k . avy-action-kill-move)
    (?K . avy-action-kill-stay)
    (?m . avy-action-teleport)
    (?v . avy-action-mark)
    (?c . avy-action-copy)
    (?i . avy-action-ispell)
    (?y . avy-action-yank)
    (?Y . avy-action-yank-line)
    (?z . avy-action-zap-to-char)
    ;; Custom actions
    (?d . my-avy-action-find-definitions)
    ;; (?g . madand//avy-action-translate-stay)
    )
  "Override value of `avy-dispatch-alist' to prevent conflicts when
`avy-keys' is set to Keymacs home row keys (raenotih).
See also `my-quick-select-keys'.")
#+end_src

#+begin_src emacs-lisp
(use-package avy
  :custom
  (avy-keys my-quick-select-keys)
  (avy-dispatch-alist my-avy-dispatch-alist)
  (avy-timeout-seconds 0.3)
  (avy-background t)
  (avy-single-candidate-jump nil)
  :bind (("M-o" . avy-goto-char-timer)
         ("M-g l" . avy-goto-line)
         ("M-g w" . avy-goto-word-1)))
#+end_src

*** Avy Embark Integration

#+begin_src emacs-lisp
(defun my-avy-action-embark-stay (pt)
  (unwind-protect
      (save-excursion
        (goto-char pt)
        (embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)

(defun my-avy-action-embark-move (pt)
  (goto-char pt)
  (embark-act))

(with-eval-after-load 'avy
  (setf (alist-get ?. avy-dispatch-alist) #'my-avy-action-embark-stay)
  (setf (alist-get ?, avy-dispatch-alist) #'my-avy-action-embark-move))
#+end_src

** link-hint

[[https://github.com/noctuid/link-hint.el]]

Use Avy to open, copy, or take a user-defined action on “links”.

#+begin_src emacs-lisp
(use-package link-hint
  :bind (("C-;" . link-hint-open-link)
         :map Info-mode-map (";" . link-hint-open-link)
         ;; Modes that derive from `special-mode': `eww-mode', `help-mode',
         ;; `magit-mode'
         :map special-mode-map (";" . link-hint-open-link))
  :init
  (with-eval-after-load 'cus-edit
    (define-key custom-mode-map (kbd ";") #'link-hint-open-link))
  (with-eval-after-load 'view
    (define-key view-mode-map (kbd ";") #'link-hint-open-link)))
#+end_src

Fix ~link-hint~ scrolling window up when point is in the last visible line of a
Customize buffer:

#+begin_src emacs-lisp
(defun my-with-inhibit-resize-mini-widows (function &rest arguments)
  "Call FUNCTION with ARGUMENTS, with `resize-mini-windows' bound to nil."
  (let ((resize-mini-windows nil))
    (apply function arguments)))

(advice-add 'link-hint-open-link :around #'my-with-inhibit-resize-mini-widows)
;; (advice-remove 'link-hint-open-link  #'my-with-inhibit-resize-mini-widows)
#+end_src

** Embark

[[https://github.com/oantolin/embark]]

#+begin_src emacs-lisp
(use-package embark
  :bind (("C-." . embark-act)
         ("M-." . embark-dwim)
         :map special-mode-map
         ("." . embark-act)))
#+end_src

#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Marginalia

[[https://github.com/minad/marginalia]]

#+begin_src emacs-lisp
(use-package marginalia
  :bind
  (("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+end_src

** Orderless

- [[https://github.com/oantolin/orderless]]
- aenc

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion orderless)))))
#+end_src

** Vertico

[[https://github.com/minad/vertico]]

#+begin_src emacs-lisp
(use-package vertico
  :custom
  (vertico-scroll-margin 1)
  (vertico-count 16)
  (vertico-cycle t)
  :init
  (vertico-mode)
  :config
  ;; This package is a Vertico extension, which prefixes candidates with
  ;; indices and allows selection using prefix arguments.
  (require 'vertico-indexed "extensions/vertico-indexed")
  (with-eval-after-load 'vertico-indexed
    (vertico-indexed-mode 1))
  ;; This package is a Vertico extension, which provides quick keys.
  (require 'vertico-quick "extensions/vertico-quick")
  (with-eval-after-load 'vertico-quick
    (setq vertico-quick1 "raenot"
          vertico-quick2 "ih")
    (define-key vertico-map (kbd "C-;") #'vertico-quick-exit)
    (define-key vertico-map (kbd "M-;") #'vertico-quick-jump)
    (define-key vertico-map (kbd "C-M-;") #'vertico-quick-insert)))
#+end_src

** Consult

#+begin_src emacs-lisp
(setq consult-project-root-function
      (lambda ()
        (when-let (project (project-current))
          (project-root project))))
#+end_src

#+begin_src emacs-lisp
(use-package consult
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)            ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)      ;; orig. yank-pop
         ("<help> a" . consult-apropos)  ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)      ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)    ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)  ;; orig. goto-line
         ("M-g o" . consult-outline)      ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s F" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         :map isearch-mode-map
         ("M-e" . consult-isearch)    ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)  ;; orig. isearch-edit-string
         ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))
  :init
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  :config
  (consult-customize
    consult-theme
    :preview-key '(:debounce 0.2 any)
    consult-ripgrep consult-git-grep consult-grep
    consult-bookmark consult-recent-file consult-xref
    consult--source-file consult--source-project-file consult--source-bookmark
    :preview-key (kbd "M-.")))
#+end_src

** Popper

https://github.com/karthink/popper

Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces,
while still keeping them within arm’s reach.

#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-~"   . popper-toggle-latest)
         ("M-~"   . popper-cycle)
         ("C-M-~" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*Native-compile-Log\\*"
          "\\*Async-native-compile-log\\*"
          "\\*Compile-Log\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src

* Minibuffer

[[info:emacs#Minibuffer][emacs#Minibuffer]]

Make default argument be displayed as ~[DEFAULT-ARG]~ instead of
~(default DEFAULT-ARG)~, saving some screen space:

#+begin_src emacs-lisp
(setq minibuffer-eldef-shorten-default t)
#+end_src

** Recursive Minibuffers

[[info:emacs#Recursive Edit][emacs#Recursive Edit]]

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(minibuffer-depth-indicate-mode 1)
#+end_src

** History

[[info:emacs#Minibuffer History][emacs#Minibuffer History]]

#+begin_src emacs-lisp
(setq history-length 1000)
(setq history-delete-duplicates t)
#+end_src

** Savehist                                                         :builtin:

Save minibuffer and other "history" across Emacs restarts.

#+begin_src emacs-lisp
(use-package savehist
  :straight nil                         ; Built-in package
  :custom
  (savehist-additional-variables '(kill-ring log-edit-comment-ring))
  :init
  (savehist-mode 1))
#+end_src

* Files
** Auto Save

[[info:emacs#Auto Save Files][emacs#Auto Save Files]]

Auto-save a file after typing 100 characters.

#+begin_src emacs-lisp
(setq auto-save-interval 100)
#+end_src

Do not bother us with the message ~Auto-saving...done~.

#+begin_src emacs-lisp
(setq auto-save-no-message t)
#+end_src

Store auto save files under the ~var/auto-save/~ directory, not to litter the
working drectories.

#+begin_src emacs-lisp
(let* ((hash-algo 'sha256)
       (base-dir (no-littering-expand-var-file-name "auto-save/"))
       (remote-files-dir (file-name-concat base-dir "remote/"))
       (local-files-dir (file-name-concat base-dir "local/")))
  (setq auto-save-file-name-transforms
        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,remote-files-dir ,hash-algo)
          (".*" ,local-files-dir ,hash-algo)))
  (dolist (dir (list remote-files-dir local-files-dir))
    (unless (file-directory-p dir)
      (make-directory dir))))
#+end_src

** Backup Files

[[info:emacs#Backup][emacs#Backup]]

Make backups for files handled by version control (e.g. Git).

#+begin_src emacs-lisp
(setq vc-make-backup-files t)
#+end_src

Always make numeric backup versions.

#+begin_src emacs-lisp
(setq version-control t)
#+end_src

Keep 5 most recent numeric backups of a file.

#+begin_src emacs-lisp
(setq kept-new-versions 5)
#+end_src

Delete excess backup versions silently.

#+begin_src emacs-lisp
(setq delete-old-versions t)
#+end_src

** recentf                                                          :builtin:

#+begin_src emacs-lisp
(use-package recentf
  :straight nil
  :init (recentf-mode 1))
#+end_src

** sudo-edit

The following command may come in handy if you opened a file and realized it is
write-protected from regular users.

#+begin_src emacs-lisp
;; from magnars
(defun my-sudo-edit (&optional arg)
  "Edit a file as root via sudo.

Edit the current buffer's file as root. If the buffer isn't
visiting a file, prompt user to select a file. If opening a flile
as root was successfull, the original buffer is killed (unless it
has unsaved changes).

With prefix argument, always prompt for a file to sudo-edit."
  (interactive "P")
  (require 'tramp)
  (let ((fname (if (or arg (not buffer-file-name))
                   (read-file-name "File: ")
                 buffer-file-name))
        (orig-buffer (and buffer-file-name (current-buffer))))
    (find-file
     (if (not (tramp-tramp-file-p fname))
         (concat "/sudo:root@localhost:" fname)
       (with-parsed-tramp-file-name fname parsed
         (when (equal parsed-user "root")
           (error "Already root!"))
         (let* ((new-hop (tramp-make-tramp-file-name
                          ;; Try to retrieve a tramp method suitable for
                          ;; multi-hopping
                          (cond ((tramp-get-method-parameter
                                  parsed 'tramp-login-program))
                                ((tramp-get-method-parameter
                                  parsed 'tramp-copy-program))
                                (t parsed-method))
                          parsed-user
                          parsed-domain
                          parsed-host
                          parsed-port
                          nil
                          parsed-hop))
                (new-hop (substring new-hop 1 -1))
                (new-hop (concat new-hop "|"))
                (new-fname (tramp-make-tramp-file-name
                            "sudo"
                            parsed-user
                            parsed-domain
                            parsed-host
                            parsed-port
                            parsed-localname
                            new-hop)))
           new-fname))))
    (when (and orig-buffer
               (not (buffer-modified-p orig-buffer)))
      (kill-buffer orig-buffer))))
#+end_src

* Windows

** winner-mode                                                     :builtin:

Winner mode is a global minor mode that records the changes in the window
configuration (i.e. how the frames are partitioned into windows) so that the
changes can be "undone" using the command `winner-undo'.  By default this one is
bound to the key sequence ctrl-c left.  If you change your mind (while undoing),
you can press ctrl-c right (calling `winner-redo').

#+begin_src emacs-lisp
(winner-mode 1)

(global-set-key (kbd "C-x w u") #'winner-undo)
(global-set-key (kbd "C-x w r") #'winner-redo)
#+end_src

* Frames

Rebind ~C-x 5 c~ because its original command, ~clone-frame~, may crash Emacs.

#+begin_src emacs-lisp
(define-key ctl-x-5-map "c" #'make-frame-command)
#+end_src

* Misc

** GPG

#+begin_src emacs-lisp
(setq ange-ftp-netrc-filename "~/.authinfo.gpg"
      auth-source-gpg-encrypt-to "dev@madand.net"
      auth-sources '("~/.authinfo.gpg"))
#+end_src

** Enable all disabled commands

[[info:emacs#Disabling][emacs#Disabling]]

Some of the Emacs commands (e.g. ~narrow-to-region~) are disabled by default and
Emacs asks permission to run such a command every time. Let's enable them all.

First, remember the exact list of initially disabled commands.

#+begin_src emacs-lisp
(defvar my-initially-disabled-commands (cl-loop for sym being the symbols
                                                when (get sym 'disabled)
                                                  collect sym)
  "Commands that are disabled by default.")
#+end_src

Now, enable all of them.

#+begin_src emacs-lisp
(dolist (command my-initially-disabled-commands)
  (put command 'disabled nil))
#+end_src

** Undo/Redo

[[info:emacs#Undo][emacs#Undo]]

** vundo

[[https://github.com/casouri/vundo]]

#+begin_src emacs-lisp
(use-package vundo
  :straight '(vundo :type git :host github :repo "casouri/vundo")
  :bind ("C-<f1>" . vundo))
#+end_src

** ytdl

#+begin_src emacs-lisp
(use-package ytdl
  :custom
  (ytdl-video-folder "~/media/Video/"))
#+end_src

** Startup                                                          :builtin:

#+begin_src emacs-lisp
(use-package startup
  :straight nil                         ; Built-in package
  :no-require t
  :custom
  (initial-buffer-choice (expand-file-name "README.org" user-emacs-directory))
  (initial-major-mode 'emacs-lisp-mode)
  (inhibit-default-init t)
  (inhibit-startup-screen t)
  (inhibit-startup-echo-area-message t)
  (inhibit-startup-message t)
  (initial-scratch-message nil))
#+end_src

** Save Place                                                       :builtin:

~save-place-mode~ remembers the last point position in each visisted file,
across Emacs restarts.

#+begin_src emacs-lisp
(use-package saveplace
  :straight nil
  :init
  (save-place-mode 1))
#+end_src

** Incremental Search (isearch)                                     :builtin:

~-~ key can be used without using ~Shift~.

#+begin_src emacs-lisp
(define-key search-map "-" #'isearch-forward-symbol)
#+end_src

** Xref                                                             :builtin:

[[info:emacs#Xref][emacs#Xref]]

Make xref use rg for faster searches:

#+begin_src emacs-lisp
(use-package xref
  :straight nil
  :custom
  (xref-search-program 'ripgrep))
#+end_src

Make the found definition be displayed at the top of the window:

#+begin_src emacs-lisp
; (remove-hook 'xref-after-update-hook 'recenter)
(add-hook 'xref-after-update-hook #'reposition-window)
#+end_src

** Help                                                             :builtin:

#+begin_src emacs-lisp
(use-package help
  :straight nil
  :custom
  (help-window-select t)
  :bind
  (("C-h C-l" . find-library)
   :map help-mode-map
   ("n" . forward-button)
   ("p" . backward-button)))
#+end_src

** rainbow-mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :bind
  ( :map my-toggles-map
    ("r" . rainbow-mode)))
#+end_src

** Dired                                                            :builtin:

#+begin_src emacs-lisp
(use-package dired
  :straight nil
  :config
  (require 'dired-x))
#+end_src

** iedit

[[https://github.com/victorhge/iedit]]

Edit multiple regions in the same way simultaneously.

#+begin_src emacs-lisp
(use-package iedit
  :custom
  (iedit-toggle-key-default (kbd "C-:")))
#+end_src

** visual-fill-column-mode

#+begin_src emacs-lisp
(straight-use-package 'visual-fill-column)
#+end_src

** nov.el - EPUB Reader

#+begin_src emacs-lisp
(straight-use-package 'nov)

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

** pdf-tools

[[https://github.com/vedang/pdf-tools]]

PDF Tools is, among other things, a replacement of DocView for PDF files. The
key difference is that pages are not pre-rendered by e.g. ghostscript and stored
in the file-system, but rather created on-demand and stored in memory.

#+begin_src emacs-lisp
(straight-use-package 'pdf-tools)

(add-hook 'after-init-hook #'pdf-tools-install)
#+end_src

** wgrep

[[https://github.com/mhayashi1120/Emacs-wgrep]]

#+begin_src emacs-lisp
(use-package wgrep)
#+end_src

** speed-type

[[https://github.com/hagleitn/speed-type]]

Practice touch/speed typing in Emacs.

#+begin_src emacs-lisp
(use-package speed-type)

(defun my-speed-type-setup-buffer (&rest _)
  "Configure a `speed-type' buffer."
  (setq-local view-read-only nil)
  (setq-local scroll-conservatively 101)
  (text-scale-set 3))
(advice-add 'speed-type--setup :after #'my-speed-type-setup-buffer)
;(advice-remove 'speed-type--setup #'my-speed-type-setup-buffer)

#+end_src

** Olivetti

[[https://github.com/rnkn/olivetti]]

Set a desired text body width to automatically resize window margins to keep the
text comfortably in the middle of the window.

#+begin_src emacs-lisp
(straight-use-package 'olivetti)
(delight 'olivetti-mode nil 'olivetti)

(add-hook 'eww-mode-hook #'olivetti-mode)
(add-hook 'nov-mode-hook #'olivetti-mode)

(with-eval-after-load 'olivetti
  (setq olivetti-style 'fancy)
  ;; Make olivetti-fringe the same color as the header line
  (face-spec-set 'olivetti-fringe
                 `((((class color) (background light)) :inherit fringe
                    :background ,(alist-get 'bg-header
                                            modus-themes-operandi-colors))
                   (((class color) (background dark)) :inherit fringe
                    :background ,(alist-get 'bg-header
                                            modus-themes-vivendi-colors)))))
#+end_src

** disk-usage.el

[[https://gitlab.com/ambrevar/emacs-disk-usage]]

View aggregate disk usage statistics. Emacs alternative for =ncdu=.

#+begin_src emacs-lisp
(straight-use-package 'disk-usage)
#+end_src

** Kitchen sink for the time being

#+begin_src emacs-lisp
(global-set-key (kbd "C-<f5>") my-toggles-map)
(define-key my-toggles-map "F" #'follow-delete-other-windows-and-split)

(define-key help-map "-" #'describe-syntax)
(define-key help-map "S" nil)
(define-key help-map "s" #'info-lookup-symbol)

(define-key emacs-lisp-mode-map (kbd "<f5>") #'eval-defun)

(setq set-mark-command-repeat-pop t)

(setq read-extended-command-predicate #'command-completion-default-include-p)

(setq tab-always-indent 'complete)
;; https://codeberg.org/joostkremers/visual-fill-column/src/branch/main/visual-fill-column.el

;; Read buffer for external processes.
(setq read-process-output-max (* 256 1024))
(setq source-directory (expand-file-name "~/git/emacs-git/"))

(setq-default fill-column 80)

(setq show-paren-when-point-inside-paren t)
(electric-pair-mode)
(repeat-mode)

(use-package mwim
  :bind (("C-a" . mwim-beginning)
         ("C-e" . mwim-end)))
#+end_src

* Version Control
** Magit

[[https://magit.vc/]]

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :custom
  (magit-diff-refine-hunk 'all)
  :init
  (setq magit-define-global-key-bindings t))
#+end_src

** vc                                                               :builtin:

Don't annoy us with ~Symbolic link to Git-controlled source file; follow link?~.

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

* International

** Language Environments

[[info:emacs#Language Environments][Language Environments]]

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+end_src

* Narrowing

[[info:emacs#Narrowing][Narrowing]]

#+begin_src emacs-lisp
(global-set-key (kbd "<f9>") #'narrow-to-defun)
(global-set-key (kbd "<f10>") #'narrow-to-region)
(global-set-key (kbd "<f12>") #'widen)

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "<f11>") #'org-narrow-to-subtree))
#+end_src

* Org

** Org Mode                                                         :builtin:

[[https://orgmode.org/]]
[[info:org#Top][Org Info Manual]]

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-edit-src-content-indentation 0)
  (org-agenda-files '("~/org/"))
  (org-ellipsis "…")
  (org-hide-emphasis-markers t)
  :bind
  (("C-c l" . org-store-link)
   ("C-c c" . org-capture)
   ("C-c a" . org-agenda)
   :map org-mode-map
   ("<f2>" . org-edit-special)
   ("C-c C-j" . consult-org-heading)
   :map org-src-mode-map
   ("<f2>" . org-edit-src-exit)))
#+end_src

** Org roam

[[https://www.orgroam.com/]]

#+begin_src emacs-lisp
(use-package org-roam
  :custom
  (org-roam-db-autosync-mode t)
  :bind (("C-c n n" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n l" . org-roam-buffer-toggle))
  :init
  (setq org-roam-v2-ack t))
#+end_src

** toc-org

[[https://github.com/snosov1/toc-org]]

#+begin_src emacs-lisp
(straight-use-package 'toc-org)

(add-hook 'org-mode-hook 'toc-org-mode)
#+end_src

** Emacs Lisp in Org

Some conveniences for working with Elisp code blocks.

#+begin_src emacs-lisp
(defun my-org-insert-elisp-block ()
  "Insert Emacs Lisp code block."
  (interactive)
  (open-line 2)
  (forward-line)
  (org-insert-structure-template "src")
  (insert "emacs-lisp\n"))

(with-eval-after-load 'org
 (define-key org-mode-map (kbd "<f1>") #'my-org-insert-elisp-block))
#+end_src

#+begin_src emacs-lisp
(defun my-org-eval-defun ()
  "`eval-defun' that works in Org buffers."
  (interactive)
  (org-edit-src-code)
  (if (eq 'emacs-lisp-mode major-mode)
      (progn
        (eval-defun nil)
        (org-edit-src-exit))
    (org-edit-src-abort)
    (error "Not implemented for non-Elisp code blocks")))

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "<f5>") #'my-org-eval-defun))
#+end_src

* EWW

** Fix bold and italic with proportional font

#+begin_src emacs-lisp
(el-patch-feature shr)
(with-eval-after-load 'shr
  (el-patch-defun shr-add-font (start end type)
    (save-excursion
      (goto-char start)
      (while (< (point) end)
	(when (bolp)
          (skip-chars-forward " "))
	(add-face-text-property (point) (min (line-end-position) end) type
				(el-patch-swap t nil))
	(if (< (line-end-position) end)
            (forward-line 1)
          (goto-char end))))))
#+end_src

** language-detection.el

[[https://github.com/andreasjansson/language-detection.el]]

Emacs Lisp library that automatically detects the programming language in a
buffer or string. Implemented as a random forest classifier, trained in
scikit-learn and deployed to Emacs Lisp.

This handy library allows us to have syntax highlighting (as provided by the
corresponding major mode!) in [[info:eww#Top][EWW]], [[https://github.com/wasamasa/nov.el][nov.el]] or any other packages that render
HTML content with the ~shr~ library.

First, let's install the package and define helper functions:

#+begin_src emacs-lisp
(straight-use-package 'language-detection)

(defun my-shr-buffer-auto-detect-mode ()
  (let* ((map '((ada ada-mode)
                (awk awk-mode)
                (c c-mode)
                (cpp c++-mode)
                (clojure clojure-mode lisp-mode)
                (csharp csharp-mode java-mode)
                (css css-mode)
                (dart dart-mode)
                (delphi delphi-mode)
                (emacslisp emacs-lisp-mode)
                (erlang erlang-mode)
                (fortran fortran-mode)
                (fsharp fsharp-mode)
                (go go-mode)
                (groovy groovy-mode)
                (haskell haskell-mode)
                (html html-mode)
                (java java-mode)
                (javascript javascript-mode)
                (json json-mode javascript-mode)
                (latex latex-mode)
                (lisp lisp-mode)
                (lua lua-mode)
                (matlab matlab-mode octave-mode)
                (objc objc-mode c-mode)
                (perl perl-mode)
                (php php-mode)
                (prolog prolog-mode)
                (python python-mode)
                (r r-mode)
                (ruby ruby-mode)
                (rust rust-mode)
                (scala scala-mode)
                (shell shell-script-mode)
                (smalltalk smalltalk-mode)
                (sql sql-mode)
                (swift swift-mode)
                (visualbasic visual-basic-mode)
                (xml sgml-mode)))
         (language (language-detection-string
                    (buffer-substring-no-properties (point-min) (point-max))))
         (modes (cdr (assoc language map)))
         (mode (cl-loop for mode in modes
                        when (fboundp mode)
                        return mode)))
    (message (format "Detected language: %s" language))
    (when (fboundp mode)
      mode)))

(defun my-shr-fontify-buffer (mode)
  (delay-mode-hooks (funcall mode))
  (font-lock-default-function mode)
  (font-lock-default-fontify-region (point-min)
                                    (point-max)
                                    nil))

(defun my-shr-fontify-pre (dom)
  (with-temp-buffer
    (shr-generic dom)
    (let ((mode (my-shr-buffer-auto-detect-mode)))
      (when mode
        (my-shr-fontify-buffer mode)))
    (buffer-string)))

(defun my-shr-tag-pre (dom)
  (let ((shr-folding-mode 'none)
        (shr-current-font 'default))
    (shr-ensure-newline)
    (insert (my-shr-fontify-pre dom))
    (shr-ensure-newline)))
#+end_src

Now, hook up our custom ~<pre>~-tags rendering function to ~shr~ and ~nov~.

#+begin_src emacs-lisp
(with-eval-after-load 'shr
  (setf (alist-get 'pre shr-external-rendering-functions) #'my-shr-tag-pre))

(with-eval-after-load 'nov
  (setf (alist-get 'pre nov-shr-rendering-functions) #'my-shr-tag-pre))
#+end_src

* Autotyping

[[info:autotype#Top][Autotype]]

** Abbrev Mode                                                      :builtin:

#+begin_src emacs-lisp
(use-package abbrev
  :straight nil
  :delight abbrev-mode
  :init
  (dolist (hook '(text-mode-hook prog-mode-hook org-mode-hook))
    (add-hook hook #'abbrev-mode)))
#+end_src

** Auto Revert                                                      :builtin:

[[info:emacs#Auto Revert][emacs#Auto Revert]]

#+begin_src emacs-lisp
(use-package autorevert
  :delight auto-revert-mode)
#+end_src

** Hippie Expand                                                    :builtin:

[[info:autotype#Hippie Expand][Hippie Expand]]

#+begin_src emacs-lisp
(use-package hippie-exp
  :straight nil                         ; Built-in package
  :custom
  (hippie-expand-try-functions-list '(try-complete-file-name-partially
                                      try-complete-file-name
                                      try-expand-all-abbrevs
                                      try-expand-list
                                      try-expand-line
                                      try-expand-dabbrev
                                      try-expand-dabbrev-all-buffers
                                      try-expand-dabbrev-from-kill
                                      try-complete-lisp-symbol-partially
                                      try-complete-lisp-symbol))
  :bind (("M-/" . hippie-expand)))
#+end_src

* Lisp

Stuff for improving the experience when working with Lisp code.

** lisp-extra-font-lock

[[https://github.com/Lindydancer/lisp-extra-font-lock]]

This package adds highlighting for a bunch of additinal things. The best one, in
my opinion, is the highlighting of dynamically scoped variables (~defvar~) in
~let~-expressions.

#+begin_src emacs-lisp
(use-package lisp-extra-font-lock
  :custom
  (lisp-extra-font-lock-quoted-face nil)
  (lisp-extra-font-lock-quoted-function-face nil)
  (lisp-extra-font-lock-backquote-face nil)
  :init
  (lisp-extra-font-lock-global-mode))
#+end_src

** Lispy

[[https://github.com/abo-abo/lispy]]

This package reimagines Paredit - a popular method to navigate and edit Lisp
code in Emacs.

#+begin_src emacs-lisp
(straight-use-package 'lispy)

(add-hook 'emacs-lisp-mode-hook #'lispy-mode)
(add-hook 'lisp-mode-hook #'lispy-mode)

(with-eval-after-load 'lispy
  (define-key lispy-mode-map (kbd "M-o") nil)
  (define-key lispy-mode-map-special (kbd "M-o") nil))
#+end_src

** Profiler                                                         :builtin:

#+begin_src emacs-lisp
(use-package profiler
  :straight nil
  :bind  ( :map my-toggles-map
           ("p p" . profiler-start)
           ("p r" . profiler-report)
           ("p o" . profiler-reset)
           ("p k" . profiler-stop)))
#+end_src

** macrostep: interactive macro-expander

[[https://github.com/joddie/macrostep]]

#+begin_src emacs-lisp
(use-package macrostep
  :bind ( :map emacs-lisp-mode-map
          ("C-c e" . macrostep-expand)))
#+end_src

* Clojure

** Cider

[[https://github.com/clojure-emacs/cider]]

#+begin_src emacs-lisp
(use-package cider)
#+end_src

* Programming

** Web Mode

#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

* Staging

** hideshow-mode

[[https://karthinks.com/software/simple-folding-with-hideshow/]]

#+begin_src emacs-lisp
(require 'hideshow)
(defun hs-cycle (&optional level)
  (interactive "p")
  (let (message-log-max
        (inhibit-message t))
    (if (= level 1)
        (pcase last-command
          ('hs-cycle
           (hs-hide-level 1)
           (setq this-command 'hs-cycle-children))
          ('hs-cycle-children
           ;; TODO: Fix this case. `hs-show-block' needs to be
           ;; called twice to open all folds of the parent
           ;; block.
           (save-excursion (hs-show-block))
           (hs-show-block)
           (setq this-command 'hs-cycle-subtree))
          ('hs-cycle-subtree
           (hs-hide-block))
          (_
           (if (not (hs-already-hidden-p))
               (hs-hide-block)
             (hs-hide-level 1)
             (setq this-command 'hs-cycle-children))))
      (hs-hide-level level)
      (setq this-command 'hs-hide-level))))

(defun hs-global-cycle ()
    (interactive)
    (pcase last-command
      ('hs-global-cycle
       (save-excursion (hs-show-all))
       (setq this-command 'hs-global-show))
      (_ (hs-hide-all))))
#+end_src


* License

GNU GPLv3.

* Epilogue                                                         :noexport:

Conventional ending for the =init.el=:

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src

File-local variables defined here make Emacs (re)tangle the init file (~init.el~),
whenever this file is saved.

#+begin_example
Local Variables:
eval: (add-hook 'after-save-hook #'org-babel-tangle 90 t)
fill-column: 80
indent-tabs-mode: nil
End:
#+end_example
